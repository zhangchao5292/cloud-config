config.env=dev
spring.redis.host=172.16.81.128
spring.redis.password=Abcd1234
spring.redis.port=6379
spring.redis.database=0
spring.redis.timeout=2000
spring.redis.pool.max-idle=8  
spring.redis.pool.min-idle=0  
spring.redis.pool.max-active=8  
spring.redis.pool.max-wait=-1

spring.rabbitmq.host=154.8.141.56
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin
spring.rabbitmq.virtual-host=/

# \u540e\u53f0\u5e93\u6570\u636e\u6e90
spring.datasource.url=jdbc\:mysql\://154.8.141.56\:8066/anhui_db?useUnicode\=true&amp;characterEncoding\=utf8&amp;characterSetResults\=utf8&useSSL\=false
spring.datasource.username=root
spring.datasource.password=123456
#spring.datasource.password=Biyu5YzU+6sxDRbmWEa3B2uUcImzDo0BuXjTlL505+/pTb+/0Oqd3ou1R6J8+9Fy3CYrM18nBDqf6wAaPgUGOg==
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=200
spring.datasource.maxWait=10000
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=true
spring.datasource.connection-timeout=15000
spring.datasource.login-timeout=15000
spring.datasource.continue-on-error=false
spring.datasource.validation-query-timeout=900
## mybatis\u914d\u7f6e
mybatis.mapperLocations=classpath*:mapper/*.xml
mybatis.typeAliasesPackage=com.service.cloud.common.entity

## \u65e5\u5fd7\u7ea7\u522b
logging.level.root=INFO
logging.level.com.service.cloud.dao=DEBUG

service.invoke.secret=1234567890987654321
# \u8FDE\u63A5\u6C60\u6574\u4F53\u5E76\u53D1\u6570
github.resttemplate.conn.pool.maxTotal=5000
# \u5355\u4E2A\u4E3B\u673A\u5E76\u53D1\u6570
github.resttemplate.conn.pool.defaultMaxPerRoute=50

github.resttemplate.retryable=true
github.resttemplate.retryCount=3

#\u8FDE\u63A5\u8D85\u65F6\u8BBE\u7F6E
github.resttemplate.conn.request.connectTimeout=2000
github.resttemplate.conn.request.readTimeout=10000
github.resttemplate.conn.request.connectionTequestTimeout=2000
github.resttemplate.conn.request.bufferRequestBody=true
github.config.servercode.xiangqi_db={"schema":"NULL","unpack":false,"gameIds":[77779],"location":"al","configs":{}}
custom.mail.enable=true
custom.mail.from=a.com
custom.mail.to=sdfd
github.support.inusercenter=anhui_db
#快速响应失败
spring.cloud.config.failFast=true
#重试机制
# 配置重试次数，默认为6
spring.cloud.config.retry.max-attempts=6
# 间隔乘数，默认1.1
spring.cloud.config.retry.multiplier=1.1
# 初始重试间隔时间，默认1000ms
spring.cloud.config.retry.initial-interval=1000
# 最大间隔时间，默认2000ms
spring.cloud.config.retry.max-interval=2000
spring.cloud.config.server.git.uri=https://github.com/zhangchao5292/cloud-config.git

#eureka客户端配置访问信息
#1.拉取服务注册信息间隔（缺省为30s
#表示eureka client间隔多久去拉取服务注册信息，默认为30秒，对于api-gateway，如果要迅速获取服务注册状态，可以缩小该值，比如5秒。
eureka.client.registry-fetch-interval-seconds=10
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/,http://localhost:8761/eureka/
# 发呆时间，即服务续约到期时间（缺省为90s）
#表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance，该值默认为90秒。
eureka.instance.lease-expiration-duration-in-seconds=60
# 心跳时间，即服务续约间隔时间（缺省为30s）
#表示eureka client发送心跳给server端的频率。如果在leaseExpirationDurationInSeconds后，server端没有收到client的心跳，则将摘除该instance
eureka.instance.lease-renewal-interval-in-seconds=20
